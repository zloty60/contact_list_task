{"version":3,"sources":["store/actionConstants.js","store/actions/contactListActions.js","components/navbar/Navbar.js","components/search/Search.js","components/contacts/ContactItem.js","components/contacts/ContactList.js","views/RootView.js","store/reducers/contactListReducer.js","store/reducers/index.js","reportWebVitals.js","index.js"],"names":["contactListActions","compareLastName","a","b","A","name","B","comparison","sortByLastName","data","forEach","el","i","arr","toLowerCase","split","test","splice","reverse","unshift","join","reverseName","sort","useStyles","makeStyles","theme","navbarTitle","flexGrow","textAlign","Navbar","classes","AppBar","position","Toolbar","Typography","className","searchWrapper","backgroundColor","padding","spacing","Search","searchValue","setSearchValue","Box","Container","TextField","value","onChange","e","target","fullWidth","label","listItem","borderBottom","textTransform","contactName","fontWeight","phoneIcon","fontSize","listItemIcon","minWidth","phoneNumber","color","ContactItem","labelId","id","phone","useState","isChecked","setChecked","ListItem","component","button","onClick","prevState","console","log","ListItemText","primary","primaryTypographyProps","variant","display","alignItems","ListItemIcon","Checkbox","edge","checked","inputProps","ContactList","contactList","filteredList","filter","contact","includes","length","Alert","severity","List","map","loader","top","left","transform","RootView","dispatch","useDispatch","useEffect","type","axios","get","payload","sortedByLastName","useSelector","state","isError","isLoading","CircularProgress","initialState","rootReducer","combineReducers","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8675f3ed.chunk.js","sourcesContent":["export const contactListActions = {\r\n  FETCH_CONTACTS_START: \"FETCH_CONTACTS_START\",\r\n  FETCH_CONTACTS_SUCCESS: \"FETCH_CONTACTS_SUCCESS\",\r\n  FETCH_CONTACTS_FAIL: \"FETCH_CONTACTS_FAIL\",\r\n  SORT_LASTNAME: \"SORT_LASTNAME\",\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport { contactListActions } from \"./../actionConstants\";\r\n\r\nexport const fetchContactList = () => async (dispatch) => {\r\n  const url = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n  try {\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_START,\r\n    });\r\n    const { data } = await axios.get(url);\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_SUCCESS,\r\n      payload: data,\r\n    });\r\n    const sortedByLastName = sortByLastName([...data]);\r\n    dispatch({\r\n      type: contactListActions.SORT_LASTNAME,\r\n      payload: sortedByLastName,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nconst compareLastName = (a, b) => {\r\n  const A = a.name;\r\n  const B = b.name;\r\n  let comparison = 0;\r\n  if (A > B) {\r\n    comparison = 1;\r\n  } else if (A < B) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n};\r\n\r\nconst reverseName = (name) => {\r\n  const arr = name.toLowerCase().split(\" \");\r\n  if (arr[0] === \"mrs.\" || arr[0] === \"mr.\") {\r\n    const test = arr[0];\r\n    arr.splice(0, 1);\r\n    arr.reverse();\r\n    arr.unshift(test);\r\n    return arr.join(\" \");\r\n  }\r\n  return arr.reverse().join(\" \");\r\n};\r\n\r\nconst sortByLastName = (data) => {\r\n  data.forEach((el, i) => {\r\n    el.name = reverseName(el.name);\r\n  });\r\n  return data.sort(compareLastName);\r\n};\r\n","import { AppBar, Toolbar, Typography, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  navbarTitle: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nexport function Navbar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.navbarTitle}>Lista kontakt√≥w</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import PropTypes from \"prop-types\";\r\nimport { TextField, Box, Container, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchWrapper: {\r\n    backgroundColor: \"#ffffff\",\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport function Search({ searchValue, setSearchValue }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.searchWrapper}>\r\n      <Container>\r\n        <TextField\r\n          value={searchValue}\r\n          onChange={(e) => setSearchValue(e.target.value)}\r\n          fullWidth\r\n          label=\"Szukaj po nazwie\"\r\n        />\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  searchValue: PropTypes.string,\r\n  setSearchValue: PropTypes.func,\r\n};\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Box,\r\n  Checkbox,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport PhoneIphoneIcon from \"@material-ui/icons/PhoneIphone\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem: {\r\n    borderBottom: \"1px solid #ccc\",\r\n    textTransform: \"capitalize\",\r\n  },\r\n  contactName: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  phoneIcon: {\r\n    fontSize: \"21px\",\r\n  },\r\n  listItemIcon: {\r\n    minWidth: \"35px\",\r\n  },\r\n  phoneNumber: {\r\n    color: \"#676767\",\r\n  },\r\n}));\r\n\r\nexport function ContactItem({ data, labelId }) {\r\n  const { id, name, phone } = data;\r\n  const [isChecked, setChecked] = useState(false);\r\n  const classes = useStyles();\r\n  const handleToggle = () => {\r\n    setChecked((prevState) => {\r\n      if (prevState === false) {\r\n        console.log(`Zaznaczono element o indeksie: ${id}`);\r\n      } else {\r\n        console.log(`Odznaczono element o indeksie: ${id}`);\r\n      }\r\n      return !prevState;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListItem\r\n      component=\"li\"\r\n      button\r\n      className={classes.listItem}\r\n      onClick={handleToggle}\r\n    >\r\n      <Box flexGrow={1}>\r\n        <ListItemText\r\n          id={labelId}\r\n          primary={name}\r\n          primaryTypographyProps={{ variant: \"inherit\" }}\r\n          className={classes.contactName}\r\n        />\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <ListItemIcon className={classes.listItemIcon}>\r\n            <PhoneIphoneIcon className={classes.phoneIcon} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            id={labelId}\r\n            primary={phone}\r\n            primaryTypographyProps={{ variant: \"inherit\" }}\r\n            className={classes.phoneNumber}\r\n          />\r\n        </Box>\r\n      </Box>\r\n      <>\r\n        <Checkbox\r\n          edge=\"end\"\r\n          checked={isChecked}\r\n          inputProps={{ \"aria-labelledby\": labelId }}\r\n        />\r\n      </>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  data: PropTypes.object,\r\n  labelId: PropTypes.string,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { List } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport { ContactItem } from \"./ContactItem\";\r\n\r\nexport function ContactList({ contactList, searchValue }) {\r\n  const filteredList = contactList.filter((contact) =>\r\n    contact.name.includes(searchValue.toLowerCase())\r\n  );\r\n\r\n  if (filteredList.length === 0 && contactList.length > 0) {\r\n    return <Alert severity=\"warning\">nic nie znaleziono</Alert>;\r\n  }\r\n\r\n  return (\r\n    <List>\r\n      {filteredList.map((contact) => {\r\n        const labelId = `checkbox-list-contact-label-${contact.id}`;\r\n        return (\r\n          <ContactItem key={contact.id} data={contact} labelId={labelId} />\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactList: PropTypes.array,\r\n  searchValue: PropTypes.string,\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Container,\r\n  CircularProgress,\r\n  Box,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport { fetchContactList } from \"./../store/actions/contactListActions\";\r\nimport { Navbar } from \"./../components/navbar/Navbar\";\r\nimport { Search } from \"./../components/search/Search\";\r\nimport { ContactList } from \"./../components/contacts/ContactList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loader: {\r\n    position: \"fixed\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%,-50%)\",\r\n  },\r\n}));\r\n\r\nexport function RootView() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    dispatch(fetchContactList());\r\n  }, [dispatch]);\r\n\r\n  const { contactList, isError, isLoading } = useSelector(\r\n    (state) => state.contact\r\n  );\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  if (isError) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <Alert severity=\"error\">co≈õ posz≈Ço nie tak</Alert>;\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      {isLoading ? (\r\n        <Box className={classes.loader}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {contactList.length > 0 && (\r\n            <Search searchValue={searchValue} setSearchValue={setSearchValue} />\r\n          )}\r\n          <Container>\r\n            <ContactList contactList={contactList} searchValue={searchValue} />\r\n          </Container>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { contactListActions } from \"./../actionConstants\";\r\n\r\nconst initialState = {\r\n  contactList: [],\r\n  isLoading: false,\r\n  isError: false,\r\n};\r\n\r\nexport const contactListReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case contactListActions.FETCH_CONTACTS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n        contactList: [],\r\n      };\r\n    case contactListActions.FETCH_CONTACTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        contactList: action.payload,\r\n      };\r\n    case contactListActions.FETCH_CONTACTS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    case contactListActions.SORT_LASTNAME:\r\n      return {\r\n        ...state,\r\n        contactList: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { contactListReducer } from \"./contactListReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  contact: contactListReducer,\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fontsource/roboto\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport { RootView } from \"./views/RootView\";\nimport { rootReducer } from \"./store/reducers/index\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nfunction configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n  return store;\n}\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <RootView />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}